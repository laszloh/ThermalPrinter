Import("env")

import re
import textwrap

try:
    from PIL import Image
except ImportError:
    env.Execute("$PYTHONEXE -m pip install Pillow")
    from PIL import Image

try:
    import numpy as np
except ImportError:
    env.Execute("$PYTHONEXE -m pip install numpy")
    import numpy as np

def encode(data):
    """
    Encodes data using PackBits encoding.
    """
    if len(data) == 0:
        return data

    if len(data) == 1:
        return b'\x00' + data

    data = bytearray(data)

    result = bytearray()
    buf = bytearray()
    pos = 0
    repeat_count = 0
    MAX_LENGTH = 127

    # we can safely start with RAW as empty RAW sequences
    # are handled by finish_raw()
    state = 'RAW'

    def finish_raw():
        if len(buf) == 0:
            return
        result.append(len(buf)-1)
        result.extend(buf)
        buf[:] = bytearray()

    def finish_rle():
        result.append(256-(repeat_count - 1))
        result.append(data[pos])

    while pos < len(data)-1:
        current_byte = data[pos]

        if data[pos] == data[pos+1]:
            if state == 'RAW':
                # end of RAW data
                finish_raw()
                state = 'RLE'
                repeat_count = 1
            elif state == 'RLE':
                if repeat_count == MAX_LENGTH:
                    # restart the encoding
                    finish_rle()
                    repeat_count = 0
                # move to next byte
                repeat_count += 1

        else:
            if state == 'RLE':
                repeat_count += 1
                finish_rle()
                state = 'RAW'
                repeat_count = 0
            elif state == 'RAW':
                if len(buf) == MAX_LENGTH:
                    # restart the encoding
                    finish_raw()

                buf.append(current_byte)

        pos += 1

    if state == 'RAW':
        buf.append(data[pos])
        finish_raw()
    else:
        repeat_count += 1
        finish_rle()

    return bytes(result)


def aslist_cronly(value):
    if isinstance(value, str):
        value = filter(None, [x.strip() for x in value.splitlines()])
    return list(value)


def aslist(value, flatten=True):
    """ Return a list of strings, separating the input based on newlines
    and, if flatten=True (the default), also split on spaces within
    each line."""
    values = aslist_cronly(value)
    if not flatten:
        return values
    result = []
    for value in values:
        subvalues = value.split()
        result.extend(subvalues)
    return result


def convert(path, convert, thresh):
    im = Image.open(path)
    if not convert:
        assert (im.mode != "1"),"Only bilevel images can be embedded!\nEither convert to bilevel or enable automatic converting with convert_image = True"
    output = {"rowData": [], "data": bytearray()}
    if convert:
        print("Converting file to balck & white...")
        im = im.convert('L').point(lambda x: True if x > thresh else False , mode='1')
        #im.show()
    img_array = np.array(im.getdata()).reshape((im.size[1], im.size[0]))
    for imgRow in img_array:
        packed = np.packbits(imgRow)
        packBits = encode(packed)
        output['rowData'].append(len(packBits))
        output['data'] += bytearray(packBits)
    return output


input_images = aslist(env.GetProjectOption("embed_images"))
convert_bw = env.GetProjectOption("convert_image", False)
threshold = int(env.GetProjectOption("convert_threshold", 200))
target_file = env.GetProjectOption("convert_output", "src/images.h")

HEADER = '''// Code generated by "imageConverter.py"; DO NOT EDIT.
#pragma once

#include "ThermalPrinter.h"
#include <Arduino.h>


'''

with open(target_file, "+wt") as f:
    f.write(HEADER)
    for file in input_images:
        print(f"Embedding: {file}")
        data = convert(file, convert_bw, threshold)
        var_name = re.sub('[^a-zA-Z0-9]+', '_', file)
        bin_name = f"_binary_{var_name}_"
        nl="\n"

        f.write(f"constexpr const uint8_t {bin_name} [] = {{{nl}")
        lst = ['0x{:02X}'.format(i) for i in data["data"]]
        f.write("\n".join(textwrap.wrap(', '.join(lst), 180, initial_indent="    ", subsequent_indent="    ")))
        f.write(f"{nl}}};{nl}constexpr ThermalPrinter::tiffRaw<{len(data['rowData'])}> {var_name} = {{{nl}    {{{{{nl}")
        f.write("\n".join(textwrap.wrap(", ".join(str(i) for i in data["rowData"]), 180, initial_indent="        ", subsequent_indent="        ")))
        f.write(f"{nl}    }}}},{nl}    {bin_name}{nl}}};{nl}{nl}")
        
